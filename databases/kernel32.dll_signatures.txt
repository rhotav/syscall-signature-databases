BOOL fastcall HeapValidate(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem)
BOOL fastcall WriteProcessMemory(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T * lpNumberOfBytesWritten)
BOOL fastcall VirtualProtectEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
uint fastcall QuirkIsEnabledForProcessWorker(HANDLE param_1, uint param_2, uint * param_3)
HANDLE fastcall CreateWaitableTimerW(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCWSTR lpTimerName)
BOOL fastcall CreateProcessA(LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
LPVOID fastcall VirtualAllocEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
BOOL fastcall TransactNamedPipe(HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped)
BOOL fastcall SystemTimeToTzSpecificLocalTime(TIME_ZONE_INFORMATION * lpTimeZoneInformation, SYSTEMTIME * lpUniversalTime, LPSYSTEMTIME lpLocalTime)
int fastcall GetSystemDefaultLocaleName(LPWSTR lpLocaleName, int cchLocaleName)
int fastcall CompareStringA(LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int cchCount1, PCNZCH lpString2, int cchCount2)
BOOL fastcall GetNamedPipeServerProcessId(HANDLE Pipe, PULONG ServerProcessId)
BOOL fastcall TzSpecificLocalTimeToSystemTime(TIME_ZONE_INFORMATION * lpTimeZoneInformation, SYSTEMTIME * lpLocalTime, LPSYSTEMTIME lpUniversalTime)
LANGID fastcall GetUserDefaultLangID(void)
BOOL fastcall SetCurrentDirectoryW(LPCWSTR lpPathName)
LSTATUS fastcall RegOpenUserClassesRoot(HANDLE hToken, DWORD dwOptions, REGSAM samDesired, PHKEY phkResult)
BOOL fastcall FlushViewOfFile(LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush)
BOOL fastcall SetNamedPipeHandleState(HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout)
BOOL fastcall DisconnectNamedPipe(HANDLE hNamedPipe)
ATOM fastcall FindAtomA(LPCSTR lpString)
BOOL fastcall CheckRemoteDebuggerPresent(HANDLE hProcess, PBOOL pbDebuggerPresent)
LSTATUS fastcall RegOpenKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
BOOL fastcall TerminateJobObject(HANDLE hJob, UINT uExitCode)
HGLOBAL fastcall GlobalHandle(LPCVOID pMem)
BOOL fastcall GetPhysicallyInstalledSystemMemory(PULONGLONG TotalMemoryInKilobytes)
BOOL fastcall WaitNamedPipeW(LPCWSTR lpNamedPipeName, DWORD nTimeOut)
DWORD fastcall GetCurrentThreadId(void)
BOOL fastcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
ulonglong fastcall GetCalendarSupportedDateRange(uint param_1, uint * param_2, uint * param_3)
int fastcall GetGeoInfoW(GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId)
UINT fastcall GetProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault)
UINT fastcall GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName)
DWORD fastcall GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName)
BOOL fastcall UnregisterWait(HANDLE WaitHandle)
ATOM fastcall GlobalAddAtomA(LPCSTR lpString)
ATOM fastcall GlobalDeleteAtom(ATOM nAtom)
UINT fastcall GetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize)
UINT fastcall GlobalGetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize)
ATOM fastcall DeleteAtom(ATOM nAtom)
ATOM fastcall GlobalAddAtomW(LPCWSTR lpString)
BOOL fastcall DosDateTimeToFileTime(WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime)
ATOM fastcall AddAtomW(LPCWSTR lpString)
ATOM fastcall FindAtomW(LPCWSTR lpString)
ATOM fastcall GlobalFindAtomW(LPCWSTR lpString)
BOOL fastcall FileTimeToDosDateTime(FILETIME * lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime)
ulonglong fastcall QuirkIsEnabledWorker(uint param_1)
BOOL fastcall GetComputerNameW(LPWSTR lpBuffer, LPDWORD nSize)
BOOL fastcall WritePrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName)
bool fastcall TermsrvAppInstallMode(void)
DWORD fastcall GetPrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName)
UINT fastcall GetPrivateProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName)
UINT fastcall GetProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault)
ULONGLONG fastcall GetTickCount64(void)
BOOL fastcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
LPVOID fastcall TlsGetValue(DWORD dwTlsIndex)
int fastcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
DWORD fastcall GetTickCount(void)
HANDLE fastcall GetCurrentThread(void)
BOOL fastcall GetQueuedCompletionStatus(HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED * lpOverlapped, DWORD dwMilliseconds)
HANDLE fastcall GetProcessHeap(void)
DWORD fastcall GetLastError(void)
int fastcall WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar)
BOOL fastcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
BOOL fastcall QueryPerformanceCounter(LARGE_INTEGER * lpPerformanceCount)
uint fastcall QuirkIsEnabled3Worker(wchar_t * param_1, uint param_2)
int fastcall CompareStringOrdinal(LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2, BOOL bIgnoreCase)
BOOL fastcall GetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor)
void fastcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
DWORD fastcall GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer)
DWORD fastcall GetLogicalDrives(void)
BOOL fastcall GetOverlappedResult(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait)
int fastcall lstrlenW(LPCWSTR lpString)
int fastcall LCMapStringW(LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest)
BOOL fastcall SetThreadLocale(LCID Locale)
LCID fastcall GetThreadLocale(void)
HLOCAL fastcall LocalFree(HLOCAL hMem)
PVOID fastcall FlsGetValue(DWORD dwFlsIndex)
int fastcall lstrlen(LPCSTR lpString)
HGLOBAL fastcall LoadResource(HMODULE hModule, HRSRC hResInfo)
LPVOID fastcall LockResource(HGLOBAL hResData)
DWORD fastcall SizeofResource(HMODULE hModule, HRSRC hResInfo)
HRSRC fastcall FindResourceExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage)
PEXCEPTION_ROUTINE fastcall RtlVirtualUnwind(DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID * HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers)
LPVOID fastcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
FARPROC fastcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
int fastcall lstrcmpiW(LPCWSTR lpString1, LPCWSTR lpString2)
HGLOBAL fastcall GlobalFree(HGLOBAL hMem)
BOOL fastcall FlushInstructionCache(HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize)
ushort fastcall GetSystemDirectoryW(void * param_1, int param_2)
BOOL fastcall GetThreadTimes(HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime)
HMODULE fastcall LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags)
BOOL fastcall QueryPerformanceFrequency(LARGE_INTEGER * lpFrequency)
int fastcall lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2)
HANDLE fastcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId)
BOOL fastcall GetProcessTimes(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime)
DWORD fastcall GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize)
int fastcall lstrcmpi(PCNZCH param_1, char * param_2)
BOOL fastcall SetThreadErrorMode(DWORD dwNewMode, LPDWORD lpOldMode)
HANDLE fastcall OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
HLOCAL fastcall LocalAlloc(UINT uFlags, SIZE_T uBytes)
BOOL fastcall PostQueuedCompletionStatus(HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped)
BOOL fastcall VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
BOOL fastcall VerifyVersionInfoW(LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask)
BOOL fastcall SetThreadPriority(HANDLE hThread, int nPriority)
BOOL fastcall RegisterWaitForSingleObject(PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags)
UINT fastcall GetWriteWatch(DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID * lpAddresses, ULONG_PTR * lpdwCount, PULONG lpdwGranularity)
bool fastcall DeactivateActCtxWorker(uint param_1)
HRSRC fastcall FindResourceA(HMODULE hModule, LPCSTR lpName, LPCSTR lpType)
HRSRC fastcall FindResourceExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage)
ulonglong fastcall BasepMapModuleHandle(ulonglong param_1, char param_2)
DWORD fastcall ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize)
BOOL fastcall SwitchToThread(void)
HANDLE fastcall CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName)
int fastcall GetThreadPriority(HANDLE hThread)
BOOL fastcall FlsSetValue(DWORD dwFlsIndex, PVOID lpFlsData)
MMRESULT fastcall timeEndPeriod(UINT uPeriod)
BOOL fastcall ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T * lpNumberOfBytesRead)
UINT fastcall _hread(HFILE hFile, LPVOID lpBuffer, UINT uBytes)
LONG fastcall _llseek(HFILE hFile, LONG lOffset, int iOrigin)
BOOL fastcall FreeLibrary(HMODULE hLibModule)
BOOL fastcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
SIZE_T fastcall VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
int fastcall GetLocaleInfoEx(LPCWSTR lpLocaleName, LCTYPE LCType, LPWSTR lpLCData, int cchData)
BOOL fastcall GetFileInformationByHandleEx(HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize)
BOOL fastcall QueryUnbiasedInterruptTime(PULONGLONG UnbiasedTime)
PRUNTIME_FUNCTION fastcall RtlLookupFunctionEntry(DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable)
BOOL fastcall GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask)
BOOL fastcall ProcessIdToSessionId(DWORD dwProcessId, DWORD * pSessionId)
PTP_TIMER fastcall CreateThreadpoolTimer(PTP_TIMER_CALLBACK pfnti, PVOID pv, PTP_CALLBACK_ENVIRON pcbe)
UINT fastcall SetErrorMode(UINT uMode)
BOOL fastcall GetSystemPowerStatus(LPSYSTEM_POWER_STATUS lpSystemPowerStatus)
int fastcall CompareStringW(LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2)
HGLOBAL fastcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes)
HANDLE fastcall CreateFileMappingW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName)
UINT fastcall ResetWriteWatch(LPVOID lpBaseAddress, SIZE_T dwRegionSize)
GEOID fastcall GetUserGeoID(GEOCLASS GeoClass)
BOOL fastcall QueryFullProcessImageNameW(HANDLE hProcess, DWORD dwFlags, LPWSTR lpExeName, PDWORD lpdwSize)
MMRESULT fastcall timeBeginPeriod(UINT uPeriod)
BOOL fastcall CreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
LPVOID fastcall MapViewOfFile(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap)
HMODULE fastcall GetModuleHandleW(LPCWSTR lpModuleName)
BOOL fastcall VirtualUnlock(LPVOID lpAddress, SIZE_T dwSize)
DWORD fastcall GetProcessId(HANDLE Process)
BOOL fastcall PulseEvent(HANDLE hEvent)
BOOL fastcall IsThreadAFiber(void)
DWORD fastcall TlsAlloc(void)
HANDLE fastcall OpenThread(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId)
BOOL fastcall GetVolumePathNameA(LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength)
void fastcall GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer)
BOOL fastcall SetInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength)
void fastcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
BOOL fastcall CreateProcessAsUserW(HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
HRSRC fastcall FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType)
BOOL fastcall GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode)
BOOL fastcall GetThreadPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer)
BOOL fastcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
int fastcall GetUserDefaultLocaleName(LPWSTR lpLocaleName, int cchLocaleName)
LCID fastcall LocaleNameToLCID(LPCWSTR lpName, DWORD dwFlags)
LPVOID fastcall MapViewOfFileEx(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress)
DWORD fastcall FormatMessageW(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list * Arguments)
DWORD fastcall GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
HANDLE fastcall CreateJobObjectW(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName)
PTP_WORK fastcall CreateThreadpoolWork(PTP_WORK_CALLBACK pfnwk, PVOID pv, PTP_CALLBACK_ENVIRON pcbe)
DWORD fastcall GetActiveProcessorCount(WORD GroupNumber)
void fastcall GetStartupInfoW(LPSTARTUPINFOW lpStartupInfo)
BOOL fastcall QueryInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength)
DWORD fastcall ResumeThread(HANDLE hThread)
BOOL fastcall UnmapViewOfFile(LPCVOID lpBaseAddress)
BOOL fastcall TlsFree(DWORD dwTlsIndex)
DWORD fastcall QueueUserAPC(PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData)
BOOL fastcall SetThreadStackGuarantee(PULONG StackSizeInBytes)
uint fastcall lstrcmp(byte * param_1, PCNZCH param_2)
HANDLE fastcall GetStdHandle(DWORD nStdHandle)
BOOL fastcall SetFileCompletionNotificationModes(HANDLE FileHandle, UCHAR Flags)
BOOL fastcall QueryActCtxW(DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T * pcbWrittenOrRequired)
int fastcall FindStringOrdinal(DWORD dwFindStringOrdinalFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, BOOL bIgnoreCase)
BOOL fastcall SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue)
LPWSTR fastcall GetCommandLineW(void)
BOOL fastcall GetCPInfo(UINT CodePage, LPCPINFO lpCPInfo)
BOOL fastcall IsDebuggerPresent(void)
BOOL fastcall SetThreadPreferredUILanguages(DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages)
SIZE_T fastcall VirtualQueryEx(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
void fastcall GetLocalTime(LPSYSTEMTIME lpSystemTime)
void fastcall ExitProcess(UINT uExitCode)
BOOL fastcall FindActCtxSectionGuid(DWORD dwFlags, GUID * lpExtensionGuid, ULONG ulSectionId, GUID * lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData)
void fastcall RaiseException(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, ULONG_PTR * lpArguments)
HMODULE fastcall LoadLibraryExA(LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags)
BOOL fastcall GetStringTypeW(DWORD dwInfoType, LPCWSTR lpSrcStr, int cchSrc, LPWORD lpCharType)
DWORD fastcall timeGetTime(void)
UINT fastcall GetACP(void)
void fastcall RtlUnwindEx(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable)
HANDLE fastcall PowerCreateRequest(PREASON_CONTEXT Context)
PTP_WAIT fastcall CreateThreadpoolWait(PTP_WAIT_CALLBACK pfnwa, PVOID pv, PTP_CALLBACK_ENVIRON pcbe)
BOOL fastcall GetVersionExW(LPOSVERSIONINFOW lpVersionInformation)
BOOL fastcall GetModuleHandleExW(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE * phModule)
BOOL fastcall GetNamedPipeClientProcessId(HANDLE Pipe, PULONG ClientProcessId)
HFILE fastcall _lclose(HFILE hFile)
BOOL fastcall SystemTimeToFileTime(SYSTEMTIME * lpSystemTime, LPFILETIME lpFileTime)
void fastcall Sleep(DWORD dwMilliseconds)
LPWCH fastcall GetEnvironmentStringsW(void)
BOOL fastcall FreeEnvironmentStringsW(LPWCH param_1)
HANDLE fastcall CreateNamedPipeW(LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
BOOL fastcall CreateTimerQueueTimer(PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags)
BOOL fastcall UnregisterWaitEx(HANDLE WaitHandle, HANDLE CompletionEvent)
void fastcall GetSystemTime(LPSYSTEMTIME lpSystemTime)
HMODULE fastcall GetModuleHandleA(LPCSTR lpModuleName)
BOOL fastcall AssignProcessToJobObject(HANDLE hJob, HANDLE hProcess)
DWORD fastcall GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer)
BOOL fastcall IsValidCodePage(UINT CodePage)
HRESULT fastcall WerRegisterFile(PCWSTR pwzFile, WER_REGISTER_FILE_TYPE regFileType, DWORD dwFlags)
DWORD fastcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
HRESULT fastcall WerUnregisterFile(PCWSTR pwzFilePath)
BOOL fastcall DisableThreadLibraryCalls(HMODULE hLibModule)
HLOCAL fastcall LocalReAlloc(HLOCAL hMem, SIZE_T uBytes, UINT uFlags)
BOOL fastcall CancelIoEx(HANDLE hFile, LPOVERLAPPED lpOverlapped)
BOOL fastcall ActivateActCtx(HANDLE hActCtx, ULONG_PTR * lpCookie)
BOOL fastcall GlobalMemoryStatusEx(LPMEMORYSTATUSEX lpBuffer)
LPSTR fastcall GetCommandLineA(void)
BOOL fastcall DeactivateActCtx(DWORD dwFlags, ULONG_PTR ulCookie)
DWORD fastcall FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback)
LPTOP_LEVEL_EXCEPTION_FILTER fastcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
BOOL fastcall PowerSetRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType)
HMODULE fastcall LoadLibraryW(LPCWSTR lpLibFileName)
BOOL fastcall PowerClearRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType)
HANDLE fastcall CreateIoCompletionPort(HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads)
HANDLE fastcall HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize)
BOOL fastcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
BOOL fastcall HeapSetInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength)
BOOL fastcall GetExitCodeThread(HANDLE hThread, LPDWORD lpExitCode)
HANDLE fastcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName)
HANDLE fastcall CreateSemaphoreExA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess)
BOOL fastcall AreFileApisANSI(void)
int fastcall GetLocaleInfoW(LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData)
PVOID fastcall RtlPcToFileHeader(PVOID PcValue, PVOID * BaseOfImage)
BOOL fastcall FlsFree(DWORD dwFlsIndex)
BOOL fastcall QueryThreadCycleTime(HANDLE ThreadHandle, PULONG64 CycleTime)
int fastcall GetDateFormatW(LCID Locale, DWORD dwFlags, SYSTEMTIME * lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate)
BOOL fastcall TrySubmitThreadpoolCallback(PTP_SIMPLE_CALLBACK pfns, PVOID pv, PTP_CALLBACK_ENVIRON pcbe)
BOOL fastcall IsValidLocale(LCID Locale, DWORD dwFlags)
BOOL fastcall GetProcessIoCounters(HANDLE hProcess, PIO_COUNTERS lpIoCounters)
void fastcall GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo)
DWORD fastcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
BOOL fastcall GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength)
HANDLE fastcall OpenFileMappingW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName)
HMODULE fastcall LoadLibraryA(LPCSTR lpLibFileName)
BOOL fastcall SetProcessShutdownParameters(DWORD dwLevel, DWORD dwFlags)
BOOL fastcall GlobalUnWire(HGLOBAL hMem)
LPVOID fastcall GlobalLock(HGLOBAL hMem)
BOOL fastcall VirtualLock(LPVOID lpAddress, SIZE_T dwSize)
DWORD fastcall GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize)
BOOL fastcall GetUserPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer)
LCID fastcall GetUserDefaultLCID(void)
int fastcall LCIDToLocaleName(LCID Locale, LPWSTR lpName, int cchName, DWORD dwFlags)
BOOL fastcall GetProductInfo(DWORD dwOSMajorVersion, DWORD dwOSMinorVersion, DWORD dwSpMajorVersion, DWORD dwSpMinorVersion, PDWORD pdwReturnedProductType)
int fastcall ResolveLocaleName(LPCWSTR lpNameToResolve, LPWSTR lpLocaleName, int cchLocaleName)
LANGID fastcall GetUserDefaultUILanguage(void)
BOOL fastcall ReplaceFile(LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved)
DWORD fastcall GetVersion(void)
BOOL fastcall DeleteTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent)
BOOL fastcall SetDllDirectoryW(LPCWSTR lpPathName)
BOOL fastcall IsWow64Process(HANDLE hProcess, PBOOL Wow64Process)
LSTATUS fastcall RegCreateKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
DWORD fastcall GetProcessIdOfThread(HANDLE Thread)
BOOL fastcall ConnectNamedPipe(HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped)
void fastcall OutputDebugStringW(LPCWSTR lpOutputString)
DWORD fastcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list * Arguments)
BOOL fastcall MoveFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName)
LANGID fastcall GetSystemDefaultUILanguage(void)
UINT fastcall GetOEMCP(void)
void fastcall OutputDebugStringA(LPCSTR lpOutputString)
LANGID fastcall SetThreadUILanguage(LANGID LangId)
LCID fastcall GetSystemDefaultLCID(void)
DWORD fastcall GetDynamicTimeZoneInformation(PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation)
BOOL fastcall QueueUserWorkItem(LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags)
BOOL fastcall TerminateProcess(HANDLE hProcess, UINT uExitCode)
DWORD fastcall GetPriorityClass(HANDLE hProcess)
HANDLE fastcall CreateActCtxW(PCACTCTXW pActCtx)
BOOL fastcall QueryProcessCycleTime(HANDLE ProcessHandle, PULONG64 CycleTime)
BOOL fastcall GetThreadContext(HANDLE hThread, LPCONTEXT lpContext)
BOOL fastcall GetSystemTimes(LPFILETIME lpIdleTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime)
BOOL fastcall SetPriorityClass(HANDLE hProcess, DWORD dwPriorityClass)
int fastcall GetTimeFormatW(LCID Locale, DWORD dwFlags, SYSTEMTIME * lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime)
LSTATUS fastcall RegSetValueExW(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, BYTE * lpData, DWORD cbData)
PTP_POOL fastcall CreateThreadpool(PVOID reserved)
PTP_CLEANUP_GROUP fastcall CreateThreadpoolCleanupGroup(void)
DWORD fastcall GetThreadId(HANDLE Thread)
void fastcall FreeLibraryAndExitThread(HMODULE hLibModule, DWORD dwExitCode)
BOOL fastcall GetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize)
DWORD fastcall GetDllDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer)
void fastcall ReleaseActCtx(HANDLE hActCtx)
BOOL fastcall HeapDestroy(HANDLE hHeap)
DWORD fastcall SuspendThread(HANDLE hThread)
EXECUTION_STATE fastcall SetThreadExecutionState(EXECUTION_STATE esFlags)
HRESULT fastcall WerRegisterMemoryBlock(PVOID pvAddress, DWORD dwSize)
BOOL fastcall GetModuleHandleExA(DWORD dwFlags, LPCSTR lpModuleName, HMODULE * phModule)
BOOL fastcall DeleteTimerQueueEx(HANDLE TimerQueue, HANDLE CompletionEvent)
SIZE_T fastcall GlobalSize(HGLOBAL hMem)
BOOL fastcall FindActCtxSectionStringW(DWORD dwFlags, GUID * lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData)
LANGID fastcall GetSystemDefaultLangID(void)
BOOL fastcall GetSystemPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer)
BOOL fastcall FreeResource(HGLOBAL hResData)
SIZE_T fastcall LocalSize(HLOCAL hMem)
HGLOBAL fastcall GlobalReAlloc(HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags)
BOOL fastcall GetSystemTimeAdjustment(PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled)
UINT fastcall GetWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize)
LSTATUS fastcall RegOpenCurrentUser(REGSAM samDesired, PHKEY phkResult)
HANDLE fastcall RegisterWaitForSingleObjectEx(HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags)
LANGID fastcall GetThreadUILanguage(void)
BOOL fastcall GetProcessHandleCount(HANDLE hProcess, PDWORD pdwHandleCount)
BOOL fastcall CancelIo(HANDLE hFile)
HRESULT fastcall RegisterApplicationRestart(PCWSTR pwzCommandline, DWORD dwFlags)
BOOL fastcall GetProcessWorkingSetSizeEx(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags)
BOOL fastcall SetThreadPriorityBoost(HANDLE hThread, BOOL bDisablePriorityBoost)
INT fastcall BaseInitAppcompatCacheSupportWorker(void)
ulonglong fastcall BaseDllReadKeywordNames(longlong param_1)
MMRESULT fastcall timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc)
int fastcall LCMapStringEx(LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam)
DWORD fastcall GetPrivateProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName)
ushort fastcall GetSystemWindowsDirectoryW(void * param_1, int param_2)
HANDLE fastcall CreateTimerQueue(void)
BOOL fastcall ChangeTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period)
BOOL fastcall EnumCalendarInfoExEx(CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx, LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPARAM lParam)
BOOL fastcall GetComputerNameA(LPSTR lpBuffer, LPDWORD nSize)
LPVOID fastcall VirtualAllocExNuma(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect, DWORD nndPreferred)
BOOL fastcall SetVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName)
DWORD fastcall SetThreadIdealProcessor(HANDLE hThread, DWORD dwIdealProcessor)
BOOL fastcall EnumTimeFormatsEx(TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam)
BOOL fastcall CreatePipe(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize)
BOOL fastcall GetStringTypeExW(LCID Locale, DWORD dwInfoType, LPCWSTR lpSrcStr, int cchSrc, LPWORD lpCharType)
BOOL fastcall GetProcessPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer)
int fastcall GetLocaleInfoA(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData)
BOOL fastcall DnsHostnameToComputerNameW(LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize)
void fastcall GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo)
DWORD fastcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
UINT fastcall GetSystemFirmwareTable(DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize)
DWORD fastcall GetProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize)
BOOL fastcall MoveFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags)
BOOL fastcall SetProcessAffinityUpdateMode(HANDLE hProcess, DWORD dwFlags)
int fastcall FindNLSStringEx(LPCWSTR lpLocaleName, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam)
int fastcall CompareStringEx(LPCWSTR lpLocaleName, DWORD dwCmpFlags, LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam)
DWORD fastcall GetShortPathNameW(LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer)
BOOL fastcall GetFileMUIPath(DWORD dwFlags, PCWSTR pcwszFilePath, PWSTR pwszLanguage, PULONG pcchLanguage, PWSTR pwszFileMUIPath, PULONG pcchFileMUIPath, PULONGLONG pululEnumerator)
DWORD fastcall VerLanguageNameW(DWORD wLang, LPWSTR szLang, DWORD cchLang)
HANDLE fastcall CreatePrivateNamespaceW(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix)
HANDLE fastcall CreateBoundaryDescriptorW(LPCWSTR Name, ULONG Flags)
BOOL fastcall AddSIDToBoundaryDescriptor(HANDLE * BoundaryDescriptor, PSID RequiredSid)
LPWSTR fastcall lstrcpynW(LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength)
HRESULT fastcall WerRegisterRuntimeExceptionModule(PCWSTR pwszOutOfProcessCallbackDll, PVOID pContext)
BOOL fastcall IsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result)
BOOL fastcall GetNumaHighestNodeNumber(PULONG HighestNodeNumber)
void fastcall DeleteBoundaryDescriptor(HANDLE BoundaryDescriptor)
HANDLE fastcall CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType)
WORD fastcall GetMaximumProcessorGroupCount(void)
BOOL fastcall ReadDirectoryChangesW(HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine)
BOOL fastcall SetThreadpoolThreadMinimum(PTP_POOL ptpp, DWORD cthrdMic)
UINT fastcall SetHandleCount(UINT uNumber)
long fastcall _hwrite(HFILE hFile, LPCCH lpBuffer, long lBytes)
DWORD_PTR fastcall SetThreadAffinityMask(HANDLE hThread, DWORD_PTR dwThreadAffinityMask)
WORD fastcall GetActiveProcessorGroupCount(void)
BOOL fastcall CopyFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags)
DWORD fastcall GetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize)
BOOLEAN fastcall ClosePrivateNamespace(HANDLE Handle, ULONG Flags)
void cdecl __security_check_cookie(uintptr_t _StackCookie)
void cdecl __report_gsfailure(uintptr_t _StackCookie)
void cdecl __security_init_cookie(void)
PEXCEPTION_ROUTINE fastcall RtlVirtualUnwind(DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID * HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers)
PRUNTIME_FUNCTION fastcall RtlLookupFunctionEntry(DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable)
void * cdecl RtlMoveMemory(void * _Dst, void * _Src, size_t _Size)
EXCEPTION_DISPOSITION __C_specific_handler(_EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, _CONTEXT * ContextRecord, _DISPATCHER_CONTEXT * DispatcherContext)
int cdecl _wcsicmp(wchar_t * _Str1, wchar_t * _Str2)
int cdecl strncmp(char * _Str1, char * _Str2, size_t _MaxCount)
int cdecl _wcsnicmp(wchar_t * _Str1, wchar_t * _Str2, size_t _MaxCount)
wchar_t * cdecl wcsrchr(wchar_t * _Str, wchar_t _Ch)
int cdecl wcsncmp(wchar_t * _Str1, wchar_t * _Str2, size_t _MaxCount)
BOOL fastcall GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength)
HANDLE fastcall GetCurrentProcess(void)
DWORD fastcall GetCurrentProcessId(void)
BOOL fastcall GetProcessWorkingSetSize(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize)
BOOL fastcall SetProcessWorkingSetSize(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize)
BOOL fastcall CloseHandle(HANDLE hObject)
BOOL fastcall DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions)
BOOL fastcall GetHandleInformation(HANDLE hObject, LPDWORD lpdwFlags)
BOOL fastcall SetHandleInformation(HANDLE hObject, DWORD dwMask, DWORD dwFlags)
BOOL fastcall CancelWaitableTimer(HANDLE hTimer)
HANDLE fastcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName)
HANDLE fastcall CreateEventExA(LPSECURITY_ATTRIBUTES lpEventAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess)
HANDLE fastcall CreateEventExW(LPSECURITY_ATTRIBUTES lpEventAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess)
HANDLE fastcall CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName)
HANDLE fastcall CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName)
HANDLE fastcall CreateMutexExA(LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess)
HANDLE fastcall CreateMutexExW(LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess)
HANDLE fastcall CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName)
HANDLE fastcall CreateSemaphoreExW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess)
HANDLE fastcall CreateSemaphoreW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName)
HANDLE fastcall CreateWaitableTimerExW(LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCWSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess)
BOOL fastcall InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount)
BOOL fastcall InitializeCriticalSectionEx(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags)
HANDLE fastcall OpenEventA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
HANDLE fastcall OpenEventW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName)
HANDLE fastcall OpenMutexW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName)
HANDLE fastcall OpenSemaphoreW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName)
HANDLE fastcall OpenWaitableTimerW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpTimerName)
BOOL fastcall ReleaseMutex(HANDLE hMutex)
BOOL fastcall ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount)
BOOL fastcall ResetEvent(HANDLE hEvent)
BOOL fastcall SetEvent(HANDLE hEvent)
BOOL fastcall SetWaitableTimer(HANDLE hTimer, LARGE_INTEGER * lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, BOOL fResume)
DWORD fastcall SleepEx(DWORD dwMilliseconds, BOOL bAlertable)
DWORD fastcall WaitForMultipleObjects(DWORD nCount, HANDLE * lpHandles, BOOL bWaitAll, DWORD dwMilliseconds)
DWORD fastcall WaitForMultipleObjectsEx(DWORD nCount, HANDLE * lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable)
DWORD fastcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
DWORD fastcall WaitForSingleObjectEx(HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable)
void fastcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
void fastcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
LONG fastcall CompareFileTime(FILETIME * lpFileTime1, FILETIME * lpFileTime2)
BOOL fastcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
BOOL fastcall CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
HANDLE fastcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
HANDLE fastcall CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
BOOL fastcall DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath)
BOOL fastcall DeleteFileA(LPCSTR lpFileName)
BOOL fastcall DeleteFileW(LPCWSTR lpFileName)
BOOL fastcall DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint)
BOOL fastcall FileTimeToLocalFileTime(FILETIME * lpFileTime, LPFILETIME lpLocalFileTime)
BOOL fastcall FindClose(HANDLE hFindFile)
BOOL fastcall FindCloseChangeNotification(HANDLE hChangeHandle)
HANDLE fastcall FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
HANDLE fastcall FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
HANDLE fastcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
HANDLE fastcall FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
HANDLE fastcall FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
HANDLE fastcall FindFirstFileNameW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWCHAR LinkName)
HANDLE fastcall FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
HANDLE fastcall FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength)
BOOL fastcall FindNextChangeNotification(HANDLE hChangeHandle)
BOOL fastcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
BOOL fastcall FindNextFileNameW(HANDLE hFindStream, LPDWORD StringLength, PWCHAR LinkName)
BOOL fastcall FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
BOOL fastcall FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength)
BOOL fastcall FindVolumeClose(HANDLE hFindVolume)
BOOL fastcall FlushFileBuffers(HANDLE hFile)
BOOL fastcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
BOOL fastcall GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes)
BOOL fastcall GetDiskFreeSpaceExW(LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes)
BOOL fastcall GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
UINT fastcall GetDriveTypeA(LPCSTR lpRootPathName)
UINT fastcall GetDriveTypeW(LPCWSTR lpRootPathName)
DWORD fastcall GetFileAttributesA(LPCSTR lpFileName)
BOOL fastcall GetFileAttributesExA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation)
BOOL fastcall GetFileAttributesExW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation)
DWORD fastcall GetFileAttributesW(LPCWSTR lpFileName)
BOOL fastcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
DWORD fastcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
BOOL fastcall GetFileSizeEx(HANDLE hFile, PLARGE_INTEGER lpFileSize)
BOOL fastcall GetFileTime(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime)
DWORD fastcall GetFileType(HANDLE hFile)
DWORD fastcall GetFinalPathNameByHandleA(HANDLE hFile, LPSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags)
DWORD fastcall GetFinalPathNameByHandleW(HANDLE hFile, LPWSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags)
DWORD fastcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR * lpFilePart)
DWORD fastcall GetFullPathNameW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR * lpFilePart)
DWORD fastcall GetLogicalDriveStringsW(DWORD nBufferLength, LPWSTR lpBuffer)
UINT fastcall GetTempFileNameA(LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName)
UINT fastcall GetTempFileNameW(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName)
DWORD fastcall GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer)
DWORD fastcall GetTempPathW(DWORD nBufferLength, LPWSTR lpBuffer)
BOOL fastcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
BOOL fastcall GetVolumeInformationByHandleW(HANDLE hFile, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
BOOL fastcall GetVolumeInformationW(LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
BOOL fastcall GetVolumePathNameW(LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength)
BOOL fastcall GetVolumePathNamesForVolumeNameW(LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength)
BOOL fastcall LocalFileTimeToFileTime(FILETIME * lpLocalFileTime, LPFILETIME lpFileTime)
BOOL fastcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
BOOL fastcall LockFileEx(HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped)
DWORD fastcall QueryDosDeviceW(LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax)
BOOL fastcall ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
BOOL fastcall ReadFileEx(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine)
BOOL fastcall ReadFileScatter(HANDLE hFile, FILE_SEGMENT_ELEMENT * aSegmentArray, DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped)
BOOL fastcall RemoveDirectoryA(LPCSTR lpPathName)
BOOL fastcall RemoveDirectoryW(LPCWSTR lpPathName)
BOOL fastcall SetEndOfFile(HANDLE hFile)
BOOL fastcall SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes)
BOOL fastcall SetFileAttributesW(LPCWSTR lpFileName, DWORD dwFileAttributes)
BOOL fastcall SetFileInformationByHandle(HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize)
DWORD fastcall SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
BOOL fastcall SetFilePointerEx(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod)
BOOL fastcall SetFileTime(HANDLE hFile, FILETIME * lpCreationTime, FILETIME * lpLastAccessTime, FILETIME * lpLastWriteTime)
BOOL fastcall SetFileValidData(HANDLE hFile, LONGLONG ValidDataLength)
BOOL fastcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
BOOL fastcall UnlockFileEx(HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped)
BOOL fastcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
BOOL fastcall WriteFileEx(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine)
BOOL fastcall WriteFileGather(HANDLE hFile, FILE_SEGMENT_ELEMENT * aSegmentArray, DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped)
BOOL fastcall DeleteTimerQueue(HANDLE TimerQueue)
int fastcall MulDiv(int nNumber, int nNumerator, int nDenominator)
BOOL fastcall EnumResourceNamesA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam)
BOOL fastcall EnumResourceNamesW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam)
BOOL fastcall CallNamedPipeW(LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut)
BOOL fastcall FileTimeToSystemTime(FILETIME * lpFileTime, LPSYSTEMTIME lpSystemTime)
int fastcall GetCalendarInfoEx(LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue)
int fastcall GetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue)
LPCH fastcall GetEnvironmentStringsA(void)
BOOL fastcall ClearCommBreak(HANDLE hFile)
BOOL fastcall ClearCommError(HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat)
BOOL fastcall EscapeCommFunction(HANDLE hFile, DWORD dwFunc)
BOOL fastcall GetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize)
BOOL fastcall GetCommMask(HANDLE hFile, LPDWORD lpEvtMask)
BOOL fastcall GetCommModemStatus(HANDLE hFile, LPDWORD lpModemStat)
BOOL fastcall GetCommProperties(HANDLE hFile, LPCOMMPROP lpCommProp)
BOOL fastcall GetCommState(HANDLE hFile, LPDCB lpDCB)
BOOL fastcall GetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts)
BOOL fastcall PurgeComm(HANDLE hFile, DWORD dwFlags)
BOOL fastcall SetCommBreak(HANDLE hFile)
BOOL fastcall SetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize)
BOOL fastcall SetCommMask(HANDLE hFile, DWORD dwEvtMask)
BOOL fastcall SetCommState(HANDLE hFile, LPDCB lpDCB)
BOOL fastcall SetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts)
BOOL fastcall SetupComm(HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue)
BOOL fastcall TransmitCommChar(HANDLE hFile, char cChar)
BOOL fastcall WaitCommEvent(HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped)
UINT fastcall GetSystemWow64DirectoryA(LPSTR lpBuffer, UINT uSize)
UINT fastcall GetSystemWow64DirectoryW(LPWSTR lpBuffer, UINT uSize)
BOOLEAN fastcall Wow64EnableWow64FsRedirection(BOOLEAN Wow64FsEnableRedirection)
BOOL fastcall CopyFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists)
BOOL fastcall ConvertFiberToThread(void)
LPVOID fastcall ConvertThreadToFiber(LPVOID lpParameter)
LPVOID fastcall ConvertThreadToFiberEx(LPVOID lpParameter, DWORD dwFlags)
LPVOID fastcall CreateFiber(SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter)
LPVOID fastcall CreateFiberEx(SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter)
void fastcall DeleteFiber(LPVOID lpFiber)
void fastcall SwitchToFiber(LPVOID lpFiber)
BOOL fastcall AllocConsole(void)
BOOL fastcall AttachConsole(DWORD dwProcessId)
BOOL fastcall FreeConsole(void)
UINT fastcall GetConsoleCP(void)
BOOL fastcall GetConsoleMode(HANDLE hConsoleHandle, LPDWORD lpMode)
UINT fastcall GetConsoleOutputCP(void)
BOOL fastcall GetNumberOfConsoleInputEvents(HANDLE hConsoleInput, LPDWORD lpNumberOfEvents)
BOOL fastcall PeekConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead)
BOOL fastcall PeekConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead)
BOOL fastcall ReadConsoleA(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, PCONSOLE_READCONSOLE_CONTROL pInputControl)
BOOL fastcall ReadConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead)
BOOL fastcall ReadConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead)
BOOL fastcall ReadConsoleW(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, PCONSOLE_READCONSOLE_CONTROL pInputControl)
BOOL fastcall SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine, BOOL Add)
BOOL fastcall SetConsoleMode(HANDLE hConsoleHandle, DWORD dwMode)
BOOL fastcall WriteConsoleA(HANDLE hConsoleOutput, void * lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved)
BOOL fastcall WriteConsoleW(HANDLE hConsoleOutput, void * lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved)
HANDLE fastcall CreateConsoleScreenBuffer(DWORD dwDesiredAccess, DWORD dwShareMode, SECURITY_ATTRIBUTES * lpSecurityAttributes, DWORD dwFlags, LPVOID lpScreenBufferData)
BOOL fastcall FillConsoleOutputAttribute(HANDLE hConsoleOutput, WORD wAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten)
BOOL fastcall FillConsoleOutputCharacterA(HANDLE hConsoleOutput, CHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten)
BOOL fastcall FillConsoleOutputCharacterW(HANDLE hConsoleOutput, WCHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten)
BOOL fastcall FlushConsoleInputBuffer(HANDLE hConsoleInput)
BOOL fastcall GenerateConsoleCtrlEvent(DWORD dwCtrlEvent, DWORD dwProcessGroupId)
BOOL fastcall GetConsoleCursorInfo(HANDLE hConsoleOutput, PCONSOLE_CURSOR_INFO lpConsoleCursorInfo)
DWORD fastcall GetConsoleOriginalTitleA(LPSTR lpConsoleTitle, DWORD nSize)
DWORD fastcall GetConsoleOriginalTitleW(LPWSTR lpConsoleTitle, DWORD nSize)
BOOL fastcall GetConsoleScreenBufferInfo(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo)
BOOL fastcall GetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx)
DWORD fastcall GetConsoleTitleA(LPSTR lpConsoleTitle, DWORD nSize)
DWORD fastcall GetConsoleTitleW(LPWSTR lpConsoleTitle, DWORD nSize)
COORD fastcall GetLargestConsoleWindowSize(HANDLE hConsoleOutput)
BOOL fastcall ReadConsoleOutputA(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion)
BOOL fastcall ReadConsoleOutputAttribute(HANDLE hConsoleOutput, LPWORD lpAttribute, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfAttrsRead)
BOOL fastcall ReadConsoleOutputCharacterA(HANDLE hConsoleOutput, LPSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead)
BOOL fastcall ReadConsoleOutputCharacterW(HANDLE hConsoleOutput, LPWSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead)
BOOL fastcall ReadConsoleOutputW(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion)
BOOL fastcall ScrollConsoleScreenBufferA(HANDLE hConsoleOutput, SMALL_RECT * lpScrollRectangle, SMALL_RECT * lpClipRectangle, COORD dwDestinationOrigin, CHAR_INFO * lpFill)
BOOL fastcall ScrollConsoleScreenBufferW(HANDLE hConsoleOutput, SMALL_RECT * lpScrollRectangle, SMALL_RECT * lpClipRectangle, COORD dwDestinationOrigin, CHAR_INFO * lpFill)
BOOL fastcall SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput)
BOOL fastcall SetConsoleCP(UINT wCodePageID)
BOOL fastcall SetConsoleCursorInfo(HANDLE hConsoleOutput, CONSOLE_CURSOR_INFO * lpConsoleCursorInfo)
BOOL fastcall SetConsoleCursorPosition(HANDLE hConsoleOutput, COORD dwCursorPosition)
BOOL fastcall SetConsoleOutputCP(UINT wCodePageID)
BOOL fastcall SetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx)
BOOL fastcall SetConsoleScreenBufferSize(HANDLE hConsoleOutput, COORD dwSize)
BOOL fastcall SetConsoleTextAttribute(HANDLE hConsoleOutput, WORD wAttributes)
BOOL fastcall SetConsoleTitleA(LPCSTR lpConsoleTitle)
BOOL fastcall SetConsoleTitleW(LPCWSTR lpConsoleTitle)
BOOL fastcall SetConsoleWindowInfo(HANDLE hConsoleOutput, BOOL bAbsolute, SMALL_RECT * lpConsoleWindow)
BOOL fastcall WriteConsoleInputA(HANDLE hConsoleInput, INPUT_RECORD * lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten)
BOOL fastcall WriteConsoleInputW(HANDLE hConsoleInput, INPUT_RECORD * lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten)
BOOL fastcall WriteConsoleOutputA(HANDLE hConsoleOutput, CHAR_INFO * lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion)
BOOL fastcall WriteConsoleOutputAttribute(HANDLE hConsoleOutput, WORD * lpAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten)
BOOL fastcall WriteConsoleOutputCharacterA(HANDLE hConsoleOutput, LPCSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten)
BOOL fastcall WriteConsoleOutputCharacterW(HANDLE hConsoleOutput, LPCWSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten)
BOOL fastcall WriteConsoleOutputW(HANDLE hConsoleOutput, CHAR_INFO * lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion)
BOOL fastcall AddConsoleAliasA(LPSTR Source, LPSTR Target, LPSTR ExeName)
BOOL fastcall AddConsoleAliasW(LPWSTR Source, LPWSTR Target, LPWSTR ExeName)
DWORD fastcall GetConsoleAliasA(LPSTR Source, LPSTR TargetBuffer, DWORD TargetBufferLength, LPSTR ExeName)
DWORD fastcall GetConsoleAliasExesA(LPSTR ExeNameBuffer, DWORD ExeNameBufferLength)
DWORD fastcall GetConsoleAliasExesLengthA(void)
DWORD fastcall GetConsoleAliasExesLengthW(void)
DWORD fastcall GetConsoleAliasExesW(LPWSTR ExeNameBuffer, DWORD ExeNameBufferLength)
DWORD fastcall GetConsoleAliasW(LPWSTR Source, LPWSTR TargetBuffer, DWORD TargetBufferLength, LPWSTR ExeName)
DWORD fastcall GetConsoleAliasesA(LPSTR AliasBuffer, DWORD AliasBufferLength, LPSTR ExeName)
DWORD fastcall GetConsoleAliasesLengthA(LPSTR ExeName)
DWORD fastcall GetConsoleAliasesLengthW(LPWSTR ExeName)
DWORD fastcall GetConsoleAliasesW(LPWSTR AliasBuffer, DWORD AliasBufferLength, LPWSTR ExeName)
BOOL fastcall GetConsoleDisplayMode(LPDWORD lpModeFlags)
COORD fastcall GetConsoleFontSize(HANDLE hConsoleOutput, DWORD nFont)
BOOL fastcall GetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo)
DWORD fastcall GetConsoleProcessList(LPDWORD lpdwProcessList, DWORD dwProcessCount)
BOOL fastcall GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo)
HWND fastcall GetConsoleWindow(void)
BOOL fastcall GetCurrentConsoleFont(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFO lpConsoleCurrentFont)
BOOL fastcall GetCurrentConsoleFontEx(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx)
BOOL fastcall GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons)
BOOL fastcall SetConsoleDisplayMode(HANDLE hConsoleOutput, DWORD dwFlags, PCOORD lpNewScreenBufferDimensions)
BOOL fastcall SetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo)
BOOL fastcall SetCurrentConsoleFontEx(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx)
double cdecl cos(double _X)
double cdecl floor(double _X)
int cdecl memcmp(void * _Buf1, void * _Buf2, size_t _Size)
void * cdecl memcpy(void * _Dst, void * _Src, size_t _Size)
void * cdecl memset(void * _Dst, int _Val, size_t _Size)
double cdecl sin(double _X)
int cdecl wcscmp(wchar_t * _Str1, wchar_t * _Str2)
LPVOID fastcall TlsGetValue(DWORD dwTlsIndex)
longlong fastcall CreateToolhelp32Snapshot(uint param_1, uint param_2)
BOOL fastcall GetNamedPipeServerSessionId(HANDLE Pipe, PULONG ServerSessionId)
BOOL fastcall IsBadCodePtr(FARPROC lpfn)
BOOL fastcall IsBadStringPtrA(LPCSTR lpsz, UINT_PTR ucchMax)
BOOL fastcall IsBadStringPtrW(LPCWSTR lpsz, UINT_PTR ucchMax)
BOOL fastcall CallbackMayRunLong(PTP_CALLBACK_INSTANCE pci)
BOOL fastcall ContinueDebugEvent(DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus)
BOOL fastcall CreateHardLinkW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
DWORD fastcall ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize)
int fastcall FindNLSString(LCID Locale, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound)
int fastcall FoldStringW(DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest)
DWORD fastcall GetCompressedFileSizeW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh)
int fastcall GetDateFormatA(LCID Locale, DWORD dwFlags, SYSTEMTIME * lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int cchDate)
int fastcall GetDateFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, SYSTEMTIME * lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar)
UINT fastcall GetErrorMode(void)
BOOL fastcall GetNamedPipeHandleStateW(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize)
int fastcall GetNumberFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, NUMBERFMTW * lpFormat, LPWSTR lpNumberStr, int cchNumber)
BOOL fastcall GetQueuedCompletionStatusEx(HANDLE CompletionPort, LPOVERLAPPED_ENTRY lpCompletionPortEntries, ULONG ulCount, PULONG ulNumEntriesRemoved, DWORD dwMilliseconds, BOOL fAlertable)
DWORD fastcall GetThreadErrorMode(void)
BOOL fastcall GetThreadIOPendingFlag(HANDLE hThread, PBOOL lpIOIsPending)
BOOL fastcall GetThreadPriorityBoost(HANDLE hThread, PBOOL pDisablePriorityBoost)
int fastcall GetTimeFormatA(LCID Locale, DWORD dwFlags, SYSTEMTIME * lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int cchTime)
int fastcall GetTimeFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, SYSTEMTIME * lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime)
UINT fastcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize)
SIZE_T fastcall HeapCompact(HANDLE hHeap, DWORD dwFlags)
BOOL fastcall HeapLock(HANDLE hHeap)
BOOL fastcall HeapUnlock(HANDLE hHeap)
BOOL fastcall HeapWalk(HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry)
BOOL fastcall IsDBCSLeadByteEx(UINT CodePage, BYTE TestChar)
BOOL fastcall IsDBCSLeadByte(BYTE TestChar)
BOOL fastcall IsNormalizedString(NORM_FORM NormForm, LPCWSTR lpString, int cwLength)
LPVOID fastcall LocalLock(HLOCAL hMem)
BOOL fastcall LocalUnlock(HLOCAL hMem)
int fastcall NormalizeString(NORM_FORM NormForm, LPCWSTR lpSrcString, int cwSrcLength, LPWSTR lpDstString, int cwDstLength)
HANDLE fastcall OpenFileById(HANDLE hVolumeHint, LPFILE_ID_DESCRIPTOR lpFileId, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwFlagsAndAttributes)
BOOL fastcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
BOOL fastcall QueryFullProcessImageNameA(HANDLE hProcess, DWORD dwFlags, LPSTR lpExeName, PDWORD lpdwSize)
BOOL fastcall QueryMemoryResourceNotification(HANDLE ResourceNotificationHandle, PBOOL ResourceState)
LSTATUS fastcall RegCloseKey(HKEY hKey)
LSTATUS fastcall RegGetValueW(HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData)
LSTATUS fastcall RegLoadMUIStringW(HKEY hKey, LPCWSTR pszValue, LPWSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCWSTR pszDirectory)
LSTATUS fastcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
LSTATUS fastcall RegQueryValueExW(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
void cdecl RtlRestoreContext(PCONTEXT ContextRecord, _EXCEPTION_RECORD * ExceptionRecord)
void fastcall RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)
DWORD fastcall SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR * lpFilePart)
BOOL fastcall SetThreadContext(HANDLE hThread, CONTEXT * lpContext)
BOOL fastcall SetThreadGroupAffinity(HANDLE hThread, GROUP_AFFINITY * GroupAffinity, PGROUP_AFFINITY PreviousGroupAffinity)
BOOL fastcall SetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor, PPROCESSOR_NUMBER lpPreviousIdealProcessor)
DWORD fastcall SignalObjectAndWait(HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, BOOL bAlertable)
BOOL fastcall TerminateThread(HANDLE hThread, DWORD dwExitCode)
HRESULT fastcall UnregisterApplicationRestart(void)
BOOL fastcall VirtualFreeEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
BOOL fastcall WaitForDebugEvent(LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds)
HRESULT fastcall WerUnregisterMemoryBlock(PVOID pvAddress)
BOOL fastcall Wow64DisableWow64FsRedirection(PVOID * OldValue)
BOOL fastcall Wow64RevertWow64FsRedirection(PVOID OlValue)
LPSTR fastcall lstrcpyn(LPSTR lpString1, LPCSTR lpString2, int iMaxLength)
ATOM fastcall GlobalFindAtomA(LPCSTR lpString)
DWORD fastcall GetProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize)
BOOL fastcall BindIoCompletionCallback(HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags)
HANDLE fastcall OpenFileMappingA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
BOOL fastcall GetMailslotInfo(HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout)
HANDLE fastcall CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCSTR lpTimerName)
HANDLE fastcall CreateWaitableTimerExA(LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess)
BOOL fastcall MoveFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags)
BOOL fastcall IsBadReadPtr(void * lp, UINT_PTR ucb)
BOOL fastcall IsBadWritePtr(LPVOID lp, UINT_PTR ucb)
BOOL fastcall IsSystemResumeAutomatic(void)
LPWSTR fastcall lstrcatW(LPWSTR lpString1, LPCWSTR lpString2)
LPSTR fastcall lstrcpy(LPSTR lpString1, LPCSTR lpString2)
LPWSTR fastcall lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2)
MMRESULT fastcall timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt)
int fastcall uaw_lstrlenW(LPCUWSTR String)
short * fastcall uaw_wcschr(short * param_1, short param_2)
PUWSTR cdecl uaw_wcscpy(PUWSTR Destination, PCUWSTR Source)
int cdecl uaw_wcsicmp(wchar_t * _Str1, wchar_t * _Str2)
size_t cdecl uaw_wcslen(PCUWSTR String)
PUWSTR cdecl uaw_wcsrchr(PCUWSTR String, WCHAR Character)
BOOL fastcall Beep(DWORD dwFreq, DWORD dwDuration)
LONG fastcall CopyLZFile(INT hfSource, INT hfDest)
LONG fastcall LZCopy(INT hfSource, INT hfDest)
void fastcall BaseDumpAppcompatCacheWorker(void)
DWORD fastcall GetFullPathNameTransactedA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR * lpFilePart, HANDLE hTransaction)
BOOL fastcall SetSystemTimeAdjustment(DWORD dwTimeAdjustment, BOOL bTimeAdjustmentDisabled)
BOOL fastcall DebugBreakProcess(HANDLE Process)
BOOL fastcall DebugSetProcessKillOnExit(BOOL KillOnExit)
BOOL fastcall Wow64GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, PWOW64_LDT_ENTRY lpSelectorEntry)
BOOL fastcall CreateDirectoryTransactedA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction)
BOOL fastcall RemoveDirectoryTransactedA(LPCSTR lpPathName, HANDLE hTransaction)
HANDLE fastcall FindFirstFileNameTransactedW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWCHAR LinkName, HANDLE hTransaction)
HANDLE fastcall FindFirstFileTransactedA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction)
HANDLE fastcall FindFirstStreamTransactedW(LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags, HANDLE hTransaction)
BOOL fastcall GetFileBandwidthReservation(HANDLE hFile, LPDWORD lpPeriodMilliseconds, LPDWORD lpBytesPerPeriod, LPBOOL pDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests)
BOOL fastcall SetFileBandwidthReservation(HANDLE hFile, DWORD nPeriodMilliseconds, DWORD nBytesPerPeriod, BOOL bDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests)
BOOL fastcall SetFileShortNameA(HANDLE hFile, LPCSTR lpShortName)
BOOL fastcall SetFileShortNameW(HANDLE hFile, LPCWSTR lpShortName)
BOOL fastcall AddSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack)
UINT fastcall EnumSystemFirmwareTables(DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize)
SIZE_T fastcall GlobalCompact(DWORD dwMinFree)
void fastcall GlobalFix(HGLOBAL hMem)
void fastcall GlobalUnfix(HGLOBAL hMem)
BOOL fastcall RemoveSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack)
SIZE_T fastcall LocalCompact(UINT uMinFree)
HLOCAL fastcall LocalHandle(LPCVOID pMem)
SIZE_T fastcall LocalShrink(HLOCAL hMem, UINT cbNewSize)
BOOL fastcall EnumResourceLanguagesA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam)
BOOL fastcall EnumResourceLanguagesW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam)
BOOL fastcall EnumResourceTypesA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam)
BOOL fastcall EnumResourceTypesW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam)
DWORD fastcall GetDllDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
BOOL fastcall SetSearchPathMode(DWORD Flags)
BOOL fastcall GetNamedPipeClientSessionId(HANDLE Pipe, PULONG ClientSessionId)
BOOL fastcall SetNamedPipeAttribute(HANDLE Pipe, PIPE_ATTRIBUTE_TYPE AttributeType, PSTR AttributeName, PVOID AttributeValue, SIZE_T AttributeValueLength)
BOOL fastcall GetNumaAvailableMemoryNode(UCHAR Node, PULONGLONG AvailableBytes)
BOOL fastcall GetNumaNodeNumberFromHandle(HANDLE hFile, PUSHORT NodeNumber)
BOOL fastcall GetNumaProcessorNode(UCHAR Processor, PUCHAR NodeNumber)
BOOL fastcall GetNumaProximityNode(ULONG ProximityId, PUCHAR NodeNumber)
BOOL fastcall CheckNameLegalDOS8Dot3A(LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal)
BOOL fastcall CheckNameLegalDOS8Dot3W(LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal)
BOOL fastcall CancelDeviceWakeupRequest(HANDLE hDevice)
BOOL fastcall SetMessageWaitingIndicator(HANDLE hMsgIndicator, ULONG ulMsgCount)
void fastcall FatalExit(int ExitCode)
BOOL fastcall GetProcessDEPPolicy(HANDLE hProcess, LPDWORD lpFlags, PBOOL lpPermanent)
DEP_SYSTEM_POLICY_TYPE fastcall GetSystemDEPPolicy(void)
BOOL fastcall GetSystemRegistryQuota(PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed)
BOOL fastcall IsBadHugeReadPtr(void * lp, UINT_PTR ucb)
BOOL fastcall IsBadHugeWritePtr(LPVOID lp, UINT_PTR ucb)
BOOL fastcall SetProcessDEPPolicy(DWORD dwFlags)
BOOL fastcall ReplacePartitionUnit(PWSTR TargetPartition, PWSTR SparePartition, ULONG Flags)
void fastcall AddRefActCtx(HANDLE hActCtx)
BOOL fastcall AllocateUserPhysicalPagesNuma(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray, DWORD nndPreferred)
BOOL fastcall AllocateUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray)
BOOL fastcall CancelSynchronousIo(HANDLE hThread)
LCID fastcall ConvertDefaultLocale(LCID Locale)
BOOL fastcall CreateDirectoryExW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
HANDLE fastcall CreateFileMappingNumaW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName, DWORD nndPreferred)
BOOL fastcall CreateHardLinkA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
BOOL fastcall CreateProcessAsUserA(HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
HANDLE fastcall CreateRemoteThread(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId)
BOOLEAN fastcall CreateSymbolicLinkW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags)
BOOL fastcall DebugActiveProcessStop(DWORD dwProcessId)
BOOL fastcall DebugActiveProcess(DWORD dwProcessId)
void fastcall DebugBreak(void)
BOOL fastcall EnumCalendarInfoExW(CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType)
BOOL fastcall EnumCalendarInfoW(CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType)
BOOL fastcall EnumDateFormatsExEx(DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam)
BOOL fastcall EnumDateFormatsExW(DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags)
BOOL fastcall EnumDateFormatsW(DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags)
BOOL fastcall EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam)
BOOL fastcall EnumResourceLanguagesExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId)
BOOL fastcall EnumResourceLanguagesExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId)
BOOL fastcall EnumResourceNamesExA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId)
BOOL fastcall EnumResourceNamesExW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId)
BOOL fastcall EnumResourceTypesExA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId)
BOOL fastcall EnumResourceTypesExW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId)
BOOL fastcall EnumSystemCodePagesW(CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags)
BOOL fastcall EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam)
BOOL fastcall EnumSystemLocalesA(LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags)
BOOL fastcall EnumSystemLocalesEx(LOCALE_ENUMPROCEX lpLocaleEnumProcEx, DWORD dwFlags, LPARAM lParam, LPVOID lpReserved)
BOOL fastcall EnumSystemLocalesW(LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags)
BOOL fastcall EnumTimeFormatsW(TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags)
BOOL fastcall EnumUILanguagesW(UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam)
void fastcall FatalAppExitA(UINT uAction, LPCSTR lpMessageText)
void fastcall FatalAppExitW(UINT uAction, LPCWSTR lpMessageText)
BOOL fastcall FreeEnvironmentStringsA(LPCH param_1)
BOOL fastcall FreeUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray)
HRESULT fastcall GetApplicationRecoveryCallback(HANDLE hProcess, APPLICATION_RECOVERY_CALLBACK * pRecoveryCallback, PVOID * ppvParameter, PDWORD pdwPingInterval, PDWORD pdwFlags)
HRESULT fastcall GetApplicationRestartSettings(HANDLE hProcess, PWSTR pwzCommandline, PDWORD pcchSize, PDWORD pdwFlags)
BOOL fastcall GetCPInfoExW(UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx)
DWORD fastcall GetCompressedFileSizeA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh)
BOOL fastcall GetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize)
int fastcall GetCurrencyFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, CURRENCYFMTW * lpFormat, LPWSTR lpCurrencyStr, int cchCurrency)
BOOL fastcall GetCurrentActCtx(HANDLE * lphActCtx)
int fastcall GetDurationFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, SYSTEMTIME * lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration)
LPCH fastcall GetEnvironmentStrings(void)
BOOL fastcall GetFileMUIInfo(DWORD dwFlags, PCWSTR pcwszFilePath, PFILEMUIINFO pFileMUIInfo, DWORD * pcbFileMUIInfo)
SIZE_T fastcall GetLargePageMinimum(void)
BOOL fastcall GetNLSVersionEx(NLS_FUNCTION function, LPCWSTR lpLocaleName, LPNLSVERSIONINFOEX lpVersionInformation)
BOOL fastcall GetNLSVersion(NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation)
BOOL fastcall GetNamedPipeAttribute(HANDLE Pipe, PIPE_ATTRIBUTE_TYPE AttributeType, PSTR AttributeName, PVOID AttributeValue, PSIZE_T AttributeValueLength)
BOOL fastcall GetNamedPipeClientComputerNameW(HANDLE Pipe, LPWSTR ClientComputerName, ULONG ClientComputerNameLength)
BOOL fastcall GetNumaNodeProcessorMaskEx(USHORT Node, PGROUP_AFFINITY ProcessorMask)
BOOL fastcall GetNumaProximityNodeEx(ULONG ProximityId, PUSHORT NodeNumber)
BOOL fastcall GetProcessGroupAffinity(HANDLE hProcess, PUSHORT GroupCount, PUSHORT GroupArray)
DWORD fastcall GetProcessHeaps(DWORD NumberOfHeaps, PHANDLE ProcessHeaps)
BOOL fastcall GetProcessPriorityBoost(HANDLE hProcess, PBOOL pDisablePriorityBoost)
BOOL fastcall GetProcessShutdownParameters(LPDWORD lpdwLevel, LPDWORD lpdwFlags)
DWORD fastcall GetProcessVersion(DWORD ProcessId)
int fastcall GetStringScripts(DWORD dwFlags, LPCWSTR lpString, int cchString, LPWSTR lpScripts, int cchScripts)
BOOL fastcall GetStringTypeA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType)
BOOL fastcall GetSystemFileCacheSize(PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags)
BOOL fastcall GetThreadGroupAffinity(HANDLE hThread, PGROUP_AFFINITY GroupAffinity)
BOOL fastcall GetTimeZoneInformationForYear(USHORT wYear, PDYNAMIC_TIME_ZONE_INFORMATION pdtzi, LPTIME_ZONE_INFORMATION ptzi)
BOOL fastcall GetUILanguageInfo(DWORD dwFlags, PCZZWSTR pwmszLanguage, PZZWSTR pwszFallbackLanguages, PDWORD pcchFallbackLanguages, PDWORD pAttributes)
UINT fastcall GlobalFlags(HGLOBAL hMem)
BOOL fastcall HeapQueryInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength)
int fastcall IdnToAscii(DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpASCIICharStr, int cchASCIIChar)
int fastcall IdnToNameprepUnicode(DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpNameprepCharStr, int cchNameprepChar)
int fastcall IdnToUnicode(DWORD dwFlags, LPCWSTR lpASCIICharStr, int cchASCIIChar, LPWSTR lpUnicodeCharStr, int cchUnicodeChar)
BOOL fastcall IsNLSDefinedString(NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr)
BOOL fastcall IsValidLanguageGroup(LGRPID LanguageGroup, DWORD dwFlags)
BOOL fastcall IsValidLocaleName(LPCWSTR lpLocaleName)
int fastcall LCMapStringA(LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest)
UINT fastcall LocalFlags(HLOCAL hMem)
BOOL fastcall MapUserPhysicalPages(PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray)
LPVOID fastcall MapViewOfFileExNuma(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress, DWORD nndPreferred)
BOOL fastcall MoveFileWithProgressW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags)
BOOL fastcall NeedCurrentDirectoryForExePathA(LPCSTR ExeName)
BOOL fastcall NeedCurrentDirectoryForExePathW(LPCWSTR ExeName)
HANDLE fastcall OpenPrivateNamespaceW(LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix)
BOOL fastcall QueryActCtxSettingsW(DWORD dwFlags, HANDLE hActCtx, PCWSTR settingsNameSpace, PCWSTR settingName, PWSTR pvBuffer, SIZE_T dwBuffer, SIZE_T * pdwWrittenOrRequired)
BOOL fastcall QueryIdleProcessorCycleTimeEx(USHORT Group, PULONG BufferLength, PULONG64 ProcessorIdleCycleTime)
BOOL fastcall QueryIdleProcessorCycleTime(PULONG BufferLength, PULONG64 ProcessorIdleCycleTime)
BOOL fastcall QueryProcessAffinityUpdateMode(HANDLE hProcess, LPDWORD lpdwFlags)
BOOL fastcall QueryThreadpoolStackInformation(PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi)
HANDLE fastcall ReOpenFile(HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes)
LSTATUS fastcall RegCopyTreeW(HKEY hKeySrc, LPCWSTR lpSubKey, HKEY hKeyDest)
LSTATUS fastcall RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
LSTATUS fastcall RegDeleteKeyExA(HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved)
LSTATUS fastcall RegDeleteKeyExW(HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved)
LSTATUS fastcall RegDeleteTreeA(HKEY hKey, LPCSTR lpSubKey)
LSTATUS fastcall RegDeleteTreeW(HKEY hKey, LPCWSTR lpSubKey)
LSTATUS fastcall RegDeleteValueA(HKEY hKey, LPCSTR lpValueName)
LSTATUS fastcall RegDeleteValueW(HKEY hKey, LPCWSTR lpValueName)
LSTATUS fastcall RegDisablePredefinedCacheEx(void)
LSTATUS fastcall RegEnumKeyExA(HKEY hKey, DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime)
LSTATUS fastcall RegEnumKeyExW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime)
LSTATUS fastcall RegEnumValueA(HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
LSTATUS fastcall RegEnumValueW(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
LSTATUS fastcall RegFlushKey(HKEY hKey)
LSTATUS fastcall RegGetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, LPDWORD lpcbSecurityDescriptor)
LSTATUS fastcall RegGetValueA(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData)
LSTATUS fastcall RegLoadKeyA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpFile)
LSTATUS fastcall RegLoadKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile)
LSTATUS fastcall RegLoadMUIStringA(HKEY hKey, LPCSTR pszValue, LPSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCSTR pszDirectory)
LSTATUS fastcall RegNotifyChangeKeyValue(HKEY hKey, BOOL bWatchSubtree, DWORD dwNotifyFilter, HANDLE hEvent, BOOL fAsynchronous)
LSTATUS fastcall RegQueryInfoKeyA(HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime)
LSTATUS fastcall RegQueryInfoKeyW(HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime)
LSTATUS fastcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
LSTATUS fastcall RegRestoreKeyA(HKEY hKey, LPCSTR lpFile, DWORD dwFlags)
LSTATUS fastcall RegRestoreKeyW(HKEY hKey, LPCWSTR lpFile, DWORD dwFlags)
LSTATUS fastcall RegSaveKeyExA(HKEY hKey, LPCSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags)
LSTATUS fastcall RegSaveKeyExW(HKEY hKey, LPCWSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags)
LSTATUS fastcall RegSetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor)
LSTATUS fastcall RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, BYTE * lpData, DWORD cbData)
LSTATUS fastcall RegUnLoadKeyA(HKEY hKey, LPCSTR lpSubKey)
LSTATUS fastcall RegUnLoadKeyW(HKEY hKey, LPCWSTR lpSubKey)
BOOLEAN cdecl RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress)
void * cdecl RtlCopyMemory(void * _Dst, void * _Src, size_t _Size)
BOOLEAN cdecl RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable)
BOOLEAN cdecl RtlInstallFunctionTableCallback(DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll)
DWORD fastcall SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR * lpFilePart)
BOOL fastcall SetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData)
BOOL fastcall SetComputerNameA(LPCSTR lpComputerName)
BOOL fastcall SetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPCSTR lpBuffer)
BOOL fastcall SetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer)
BOOL fastcall SetComputerNameW(LPCWSTR lpComputerName)
BOOL fastcall SetCurrentDirectoryA(LPCSTR lpPathName)
BOOL fastcall SetDynamicTimeZoneInformation(DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation)
BOOL fastcall SetEnvironmentStringsW(LPWCH NewEnvironment)
BOOL fastcall SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue)
void fastcall SetFileApisToANSI(void)
void fastcall SetFileApisToOEM(void)
BOOL fastcall SetFileIoOverlappedRange(HANDLE FileHandle, PUCHAR OverlappedRangeStart, ULONG Length)
BOOL fastcall SetLocalTime(SYSTEMTIME * lpSystemTime)
BOOL fastcall SetLocaleInfoW(LCID Locale, LCTYPE LCType, LPCWSTR lpLCData)
BOOL fastcall SetProcessPreferredUILanguages(DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages)
BOOL fastcall SetProcessPriorityBoost(HANDLE hProcess, BOOL bDisablePriorityBoost)
BOOL fastcall SetProcessWorkingSetSizeEx(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags)
BOOL fastcall SetStdHandleEx(DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue)
BOOL fastcall SetStdHandle(DWORD nStdHandle, HANDLE hHandle)
BOOL fastcall SetSystemFileCacheSize(SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags)
BOOL fastcall SetSystemTime(SYSTEMTIME * lpSystemTime)
BOOL fastcall SetThreadpoolStackInformation(PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi)
BOOL fastcall SetTimeZoneInformation(TIME_ZONE_INFORMATION * lpTimeZoneInformation)
BOOL fastcall SetVolumeMountPointWStub(LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName)
LONG fastcall UnhandledExceptionFilter(_EXCEPTION_POINTERS * ExceptionInfo)
DWORD fastcall VerLanguageNameA(DWORD wLang, LPSTR szLang, DWORD cchLang)
BOOL fastcall VerifyScripts(DWORD dwFlags, LPCWSTR lpLocaleScripts, int cchLocaleScripts, LPCWSTR lpTestScripts, int cchTestScripts)
HRESULT fastcall WerUnregisterRuntimeExceptionModule(PCWSTR pwszOutOfProcessCallbackDll, PVOID pContext)
BOOL fastcall Wow64GetThreadContext(HANDLE hThread, PWOW64_CONTEXT lpContext)
BOOL fastcall Wow64SetThreadContext(HANDLE hThread, WOW64_CONTEXT * lpContext)
DWORD fastcall Wow64SuspendThread(HANDLE hThread)
BOOL fastcall ZombifyActCtx(HANDLE hActCtx)
BOOL fastcall AddIntegrityLabelToBoundaryDescriptor(HANDLE * BoundaryDescriptor, PSID IntegrityLabel)
HANDLE fastcall Toolhelp32ReadProcessMemory(DWORD param_1, LPCVOID param_2, LPVOID param_3, SIZE_T param_4, SIZE_T * param_5)
INT fastcall GetExpandedNameA(LPSTR lpszSource, LPSTR lpszBuffer)
INT fastcall GetExpandedNameW(LPWSTR lpszSource, LPWSTR lpszBuffer)
void fastcall LZClose(INT hFile)
uint fastcall LZCreateFileW(longlong param_1, DWORD param_2, DWORD param_3, DWORD param_4, short * param_5)
INT fastcall LZInit(INT hfSource)
INT fastcall LZOpenFileA(LPSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle)
INT fastcall LZOpenFileW(LPWSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle)
INT fastcall LZRead(INT hFile, CHAR * lpBuffer, INT cbRead)
LONG fastcall LZSeek(INT hFile, LONG lOffset, INT iOrigin)
BOOL fastcall CommConfigDialogA(LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC)
BOOL fastcall CommConfigDialogW(LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC)
BOOL fastcall GetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize)
BOOL fastcall GetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize)
BOOL fastcall SetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize)
BOOL fastcall SetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize)
DWORD fastcall GetLongPathNameTransactedA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction)
BOOL fastcall CreateUmsCompletionList(PUMS_COMPLETION_LIST * UmsCompletionList)
BOOL fastcall DeleteUmsCompletionList(PUMS_COMPLETION_LIST UmsCompletionList)
BOOL fastcall DequeueUmsCompletionListItems(PUMS_COMPLETION_LIST UmsCompletionList, DWORD WaitTimeOut, PUMS_CONTEXT * UmsThreadList)
BOOL fastcall EnterUmsSchedulingMode(PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo)
BOOL fastcall ExecuteUmsThread(PUMS_CONTEXT UmsThread)
PUMS_CONTEXT fastcall GetCurrentUmsThread(void)
PUMS_CONTEXT fastcall GetNextUmsListItem(PUMS_CONTEXT UmsContext)
BOOL fastcall GetUmsCompletionListEvent(PUMS_COMPLETION_LIST UmsCompletionList, PHANDLE UmsCompletionEvent)
BOOL fastcall QueryUmsThreadInformation(PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength, PULONG ReturnLength)
BOOL fastcall SetUmsThreadInformation(PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength)
BOOL fastcall BuildCommDCBA(LPCSTR lpDef, LPDCB lpDCB)
BOOL fastcall BuildCommDCBAndTimeoutsA(LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts)
BOOL fastcall BuildCommDCBAndTimeoutsW(LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts)
BOOL fastcall BuildCommDCBW(LPCWSTR lpDef, LPDCB lpDCB)
DWORD fastcall CreateTapePartition(HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize)
DWORD fastcall EraseTape(HANDLE hDevice, DWORD dwEraseType, BOOL bImmediate)
DWORD fastcall GetTapePosition(HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh)
DWORD fastcall GetTapeStatus(HANDLE hDevice)
DWORD fastcall PrepareTape(HANDLE hDevice, DWORD dwOperation, BOOL bImmediate)
DWORD fastcall SetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation)
DWORD fastcall SetTapePosition(HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, BOOL bImmediate)
DWORD fastcall WriteTapemark(HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, BOOL bImmediate)
BOOL fastcall CreateHardLinkTransactedA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction)
bool fastcall ZombifyActCtxWorker(void)
int fastcall GetComPlusPackageInstallStatus(void)
HRESULT fastcall RegisterApplicationRecoveryCallback(APPLICATION_RECOVERY_CALLBACK pRecoveyCallback, PVOID pvParameter, DWORD dwPingInterval, DWORD dwFlags)
HRESULT fastcall UnregisterApplicationRecoveryCallback(void)
uint fastcall WerRegisterFileWorker(wchar_t * param_1, int param_2, uint param_3)
ulonglong fastcall WerRegisterMemoryBlockWorker(longlong param_1, uint param_2)
ulonglong fastcall WerRegisterRuntimeExceptionModuleWorker(longlong param_1, longlong param_2)
ulonglong fastcall WerUnregisterFileWorker(wchar_t * param_1)
ulonglong fastcall WerUnregisterMemoryBlockWorker(longlong param_1)
BOOL fastcall MapUserPhysicalPagesScatter(PVOID * VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray)
BOOL fastcall CancelTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer)
HANDLE fastcall SetTimerQueueTimer(HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, BOOL PreferIo)
DWORD fastcall DisableThreadProfiling(HANDLE PerformanceDataHandle)
DWORD fastcall EnableThreadProfiling(HANDLE ThreadHandle, DWORD Flags, DWORD64 HardwareCounters, HANDLE * PerformanceDataHandle)
DWORD fastcall QueryThreadProfiling(HANDLE ThreadHandle, PBOOLEAN Enabled)
DWORD fastcall ReadThreadProfilingData(HANDLE PerformanceDataHandle, DWORD Flags, PPERFORMANCE_DATA PerformanceData)
HANDLE fastcall BeginUpdateResourceA(LPCSTR pFileName, BOOL bDeleteExistingResources)
HANDLE fastcall BeginUpdateResourceW(LPCWSTR pFileName, BOOL bDeleteExistingResources)
BOOL fastcall EndUpdateResourceA(HANDLE hUpdate, BOOL fDiscard)
BOOL fastcall EndUpdateResourceW(HANDLE hUpdate, BOOL fDiscard)
BOOL fastcall UpdateResourceA(HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb)
BOOL fastcall UpdateResourceW(HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb)
int fastcall ConvertNLSDayOfWeekToWin32DayOfWeek(uint param_1)
int fastcall GetCalendarDaysInMonth(uint param_1, uint param_2, uint param_3, uint param_4)
ulonglong fastcall GetCalendarMonthsInYear(uint param_1, uint param_2, uint param_3)
ulonglong fastcall IsCalendarLeapDay(uint param_1, uint param_2, uint param_3, uint param_4, uint param_5)
ulonglong fastcall IsCalendarLeapMonth(uint param_1, uint param_2, uint param_3, uint param_4)
ulonglong fastcall IsCalendarLeapYear(uint param_1, uint param_2, uint param_3)
BOOL fastcall EnumCalendarInfoA(CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType)
BOOL fastcall EnumCalendarInfoExA(CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType)
BOOL fastcall EnumDateFormatsA(DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags)
BOOL fastcall EnumDateFormatsExA(DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags)
BOOL fastcall EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam)
BOOL fastcall EnumSystemCodePagesA(CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags)
BOOL fastcall EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam)
BOOL fastcall EnumTimeFormatsA(TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags)
BOOL fastcall EnumUILanguagesA(UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam)
int fastcall FoldStringA(DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest)
BOOL fastcall GetCPInfoExA(UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx)
int fastcall GetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int cchData, LPDWORD lpValue)
int fastcall GetCurrencyFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, CURRENCYFMTA * lpFormat, LPSTR lpCurrencyStr, int cchCurrency)
int fastcall GetGeoInfoA(GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int cchData, LANGID LangId)
int fastcall GetNumberFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, NUMBERFMTA * lpFormat, LPSTR lpNumberStr, int cchNumber)
BOOL fastcall SetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData)
BOOL fastcall SetLocaleInfoA(LCID Locale, LCTYPE LCType, LPCSTR lpLCData)
int fastcall GetDurationFormat(LCID Locale, DWORD dwFlags, SYSTEMTIME * lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration)
BOOL fastcall NotifyUILanguageChange(DWORD dwFlags, PCWSTR pcwstrNewLanguage, PCWSTR pcwstrPreviousLanguage, DWORD dwReserved, PDWORD pdwStatusRtrn)
BOOL fastcall EnumSystemGeoID(GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc)
BOOL fastcall SetUserGeoID(GEOID GeoId)
DWORD fastcall GetLongPathNameA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer)
longlong * fastcall BaseFormatTimeOut(longlong * param_1, uint param_2)
ATOM fastcall AddAtomA(LPCSTR lpString)
UINT fastcall GetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize)
UINT fastcall GlobalGetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize)
BOOL fastcall InitAtomTable(DWORD nSize)
DWORD fastcall AddLocalAlternateComputerNameA(LPCSTR param_1, int param_2)
DWORD fastcall AddLocalAlternateComputerNameW(LPCWSTR param_1, int param_2)
uint fastcall BasepGetMultiValueAddr(short * param_1, uint param_2, short * * param_3, uint * param_4)
BOOL fastcall DnsHostnameToComputerNameA(LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize)
DWORD fastcall EnumerateLocalComputerNamesA(uint param_1, int param_2, LPSTR param_3, uint * param_4)
DWORD fastcall EnumerateLocalComputerNamesW(uint param_1, int param_2, LPWSTR param_3, uint * param_4)
DWORD fastcall RemoveLocalAlternateComputerNameA(LPCSTR param_1, int param_2)
DWORD fastcall RemoveLocalAlternateComputerNameW(LPCWSTR param_1, int param_2)
DWORD fastcall SetLocalPrimaryComputerNameA(LPCSTR param_1, int param_2)
DWORD fastcall SetLocalPrimaryComputerNameW(wchar_t * param_1, int param_2)
HANDLE fastcall CreateJobObjectA(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName)
BOOL fastcall CreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags)
HANDLE fastcall OpenJobObjectA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
HANDLE fastcall OpenJobObjectW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName)
BOOL fastcall BackupRead(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, BOOL bAbort, BOOL bProcessSecurity, LPVOID * lpContext)
BOOL fastcall BackupSeek(HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID * lpContext)
BOOL fastcall BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID * lpContext)
ulonglong fastcall BaseDllReadSectionNames(longlong param_1)
DWORD fastcall GetPrivateProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName)
DWORD fastcall GetPrivateProfileSectionNamesA(LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName)
DWORD fastcall GetPrivateProfileSectionNamesW(LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName)
BOOL fastcall GetPrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile)
BOOL fastcall GetPrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile)
DWORD fastcall GetProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize)
DWORD fastcall GetProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize)
BOOL fastcall WritePrivateProfileSectionA(LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName)
BOOL fastcall WritePrivateProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName)
BOOL fastcall WritePrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName)
BOOL fastcall WritePrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile)
BOOL fastcall WritePrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile)
BOOL fastcall WriteProfileSectionA(LPCSTR lpAppName, LPCSTR lpString)
BOOL fastcall WriteProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString)
BOOL fastcall WriteProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString)
BOOL fastcall WriteProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString)
bool fastcall BaseIsDosApplication(ushort * param_1)
BOOL fastcall GetBinaryType(LPCSTR lpApplicationName, LPDWORD lpBinaryType)
BOOL fastcall GetBinaryTypeW(LPCWSTR lpApplicationName, LPDWORD lpBinaryType)
DWORD fastcall GetLongPathNameTransactedW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction)
DWORD fastcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
BOOL fastcall CallNamedPipeA(LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut)
HANDLE fastcall CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
BOOL fastcall GetNamedPipeClientComputerNameA(HANDLE Pipe, LPSTR ClientComputerName, ULONG ClientComputerNameLength)
BOOL fastcall GetNamedPipeHandleStateA(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize)
BOOL fastcall WaitNamedPipeA(LPCSTR lpNamedPipeName, DWORD nTimeOut)
HANDLE fastcall CreateBoundaryDescriptorA(LPCSTR Name, ULONG Flags)
HANDLE fastcall CreatePrivateNamespaceA(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix)
HANDLE fastcall OpenPrivateNamespaceA(LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix)
byte fastcall BasepOfShareToWin32Share(uint param_1)
BOOL fastcall CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
BOOL fastcall CopyFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags)
BOOL fastcall CopyFileTransactedA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction)
BOOL fastcall CopyFileTransactedW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction)
HANDLE fastcall CreateFileTransactedA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter)
HANDLE fastcall CreateFileTransactedW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter)
HFILE fastcall OpenFile(LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle)
BOOL fastcall ReplaceFileA(LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved)
HANDLE fastcall CreateActCtxA(PCACTCTXA pActCtx)
BOOL fastcall CreateDirectoryExA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
BOOL fastcall CreateDirectoryTransactedW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction)
BOOL fastcall RemoveDirectoryTransactedW(LPCWSTR lpPathName, HANDLE hTransaction)
HANDLE fastcall CreateFileMappingNumaA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName, DWORD nndPreferred)
BOOL fastcall CreateHardLinkTransactedW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction)
HANDLE fastcall CreateMailslotA(LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
HANDLE fastcall CreateMailslotW(LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
BOOL fastcall SetMailslotInfo(HANDLE hMailslot, DWORD lReadTimeout)
HANDLE fastcall OpenMutexA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
HANDLE fastcall OpenSemaphoreA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
HANDLE fastcall OpenWaitableTimerA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpTimerName)
BOOLEAN fastcall CreateSymbolicLinkA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags)
BOOLEAN fastcall CreateSymbolicLinkTransactedA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction)
BOOLEAN fastcall CreateSymbolicLinkTransactedW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction)
BOOL fastcall DeleteFileTransactedA(LPCSTR lpFileName, HANDLE hTransaction)
BOOL fastcall DeleteFileTransactedW(LPCWSTR lpFileName, HANDLE hTransaction)
DWORD fastcall GetCompressedFileSizeTransactedA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction)
DWORD fastcall GetCompressedFileSizeTransactedW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction)
BOOL fastcall GetFileAttributesTransactedA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction)
BOOL fastcall GetFileAttributesTransactedW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction)
BOOL fastcall MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
BOOL fastcall MoveFileTransactedA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction)
BOOL fastcall MoveFileTransactedW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction)
BOOL fastcall MoveFileWithProgressA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags)
BOOL fastcall SetFileAttributesTransactedA(LPCSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction)
BOOL fastcall SetFileAttributesTransactedW(LPCWSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction)
ulonglong fastcall Heap32First(longlong * param_1, int param_2, longlong param_3)
BOOL fastcall DefineDosDeviceA(DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath)
DWORD fastcall QueryDosDeviceA(LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax)
BOOL fastcall DeleteVolumeMountPointA(LPCSTR lpszVolumeMountPoint)
HANDLE fastcall FindFirstVolumeA(LPSTR lpszVolumeName, DWORD cchBufferLength)
HANDLE fastcall FindFirstVolumeMountPointA(LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength)
HANDLE fastcall FindFirstVolumeMountPointW(LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength)
BOOL fastcall FindNextVolumeA(HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength)
BOOL fastcall FindNextVolumeMountPointA(HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength)
BOOL fastcall FindNextVolumeMountPointW(HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength)
BOOL fastcall FindVolumeMountPointClose(HANDLE hFindVolumeMountPoint)
BOOL fastcall GetVolumeNameForVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength)
BOOL fastcall GetVolumePathNamesForVolumeNameA(LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength)
BOOL fastcall SetVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName)
BOOL fastcall FindActCtxSectionStringA(DWORD dwFlags, GUID * lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData)
HANDLE fastcall FindFirstFileTransactedW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction)
BOOL fastcall SetDllDirectoryA(LPCSTR lpPathName)
BOOL fastcall VerifyVersionInfoA(LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask)
DWORD fastcall GetMaximumProcessorCount(WORD GroupNumber)
DWORD fastcall LoadModule(LPCSTR lpModuleName, LPVOID lpParameterBlock)
BOOL fastcall SetProcessAffinityMask(HANDLE hProcess, DWORD_PTR dwProcessAffinityMask)
UINT fastcall WinExec(LPCSTR lpCmdLine, UINT uCmdShow)
BOOL fastcall GetDevicePowerState(HANDLE hDevice, BOOL * pfOn)
BOOL fastcall RequestWakeupLatency(LATENCY_TIME latency)
BOOL fastcall SetSystemPowerState(BOOL fSuspend, BOOL fForce)
DWORD fastcall GetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize)
BOOL fastcall SetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize)
BOOL fastcall SetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize)
DWORD fastcall GetFullPathNameTransactedW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR * lpFilePart, HANDLE hTransaction)
DWORD fastcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
BOOL fastcall SetVolumeLabelA(LPCSTR lpRootPathName, LPCSTR lpVolumeName)
BOOL fastcall SetVolumeLabelW(LPCWSTR lpRootPathName, LPCWSTR lpVolumeName)
BOOL fastcall GetNumaAvailableMemoryNodeEx(USHORT Node, PULONGLONG AvailableBytes)
BOOL fastcall GetNumaNodeProcessorMask(UCHAR Node, PULONGLONG ProcessorMask)
BOOL fastcall GetNumaProcessorNodeEx(PPROCESSOR_NUMBER Processor, PUSHORT NodeNumber)
DWORD fastcall GetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation)
BOOL fastcall GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry)
BOOL fastcall SetEnvironmentStringsA(LPCH NewEnvironment)
HFILE fastcall _lcreat(LPCSTR lpPathName, int iAttribute)
HFILE fastcall _lopen(LPCSTR lpPathName, int iReadWrite)
LPSTR fastcall lstrcat(LPSTR lpString1, LPCSTR lpString2)
BOOL fastcall CloseConsoleHandle(HANDLE hObject)
HANDLE fastcall DuplicateConsoleHandle(HANDLE param_1, DWORD param_2, BOOL param_3, DWORD param_4)
bool fastcall SetConsoleMenuClose(int param_1)
bool fastcall RegisterConsoleOS2(int param_1)
bool fastcall SetConsoleOS2OemFormat(int param_1)
uint fastcall WerpGetDebugger(longlong param_1, uint * param_2)
bool fastcall BaseFlushAppcompatCacheWorker(void)
bool fastcall BaseUpdateAppcompatCacheWorker(LPCWSTR param_1, ulonglong param_2, int param_3)
uint fastcall QuirkGetData2Worker(wchar_t * param_1, int * param_2)
uint fastcall QuirkGetDataWorker(uint param_1, int * param_2)
uint fastcall QuirkIsEnabled2Worker(uint param_1, ulonglong param_2)
longlong fastcall RtlWideCharArrayCopyStringWorker(longlong param_1, longlong param_2, longlong * param_3, short * param_4, longlong param_5)